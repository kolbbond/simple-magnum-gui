get_filename_component(smg_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include(CMakeFindDependencyMacro)

message(STATUS "SMG CONFIG")

# add path
list(APPEND CMAKE_MODULE_PATH ${smg_CMAKE_DIR})
list(REMOVE_AT CMAKE_MODULE_PATH -1)

# find armadillo 
find_dependency(Armadillo CONFIG REQUIRED)

# Superlu
if(@ENABLE_SUPERLU@)
	if(@superlu_FOUND@)
		if(@Armadillo_VERSION@ VERSION_GREATER_EQUAL 14.4.0)
			find_dependency(superlu)
		else()
			find_dependency(superlu EXACT 5.3.0)
		endif()
		set(ENABLE_SUPERLU ON)
	else()
		set(ENABLE_SUPERLU OFF)
	endif()
endif()

list(REMOVE_AT CMAKE_MODULE_PATH -1)

# posix threads
find_dependency(Threads)

# BLAS library
if(@ENABLE_BLAS@)
	set(BLA_VENDOR @BLA_VENDOR@)
	if(@LAPACK_FOUND@)
		find_dependency(LAPACK QUIET)
	endif()
	if(NOT BLAS_FOUND)
		find_dependency(BLAS QUIET)
	endif()
	
	# create an interface for BLAS
	if(BLAS_FOUND)
		# message(STATUS "using blas: ${BLAS_LIBRARIES}")
		if(NOT TARGET BLAS::BLAS)
			add_library(BLAS::BLAS INTERFACE IMPORTED)
			set_target_properties(BLAS::BLAS PROPERTIES
				INTERFACE_LINK_LIBRARIES "${BLAS_LIBRARIES}")
		endif()
	endif()

	# create an interface for LAPACK
	if(LAPACK_FOUND)
		if(NOT TARGET LAPACK::LAPACK)
			add_library(LAPACK::LAPACK INTERFACE IMPORTED)
			set_target_properties(LAPACK::LAPACK PROPERTIES
				INTERFACE_LINK_LIBRARIES "${LAPACK_LIBRARIES}")
		endif()
	endif()
endif()

# armadillo itself
if(NOT TARGET Arma::Armadillo)
	add_library(Arma::Armadillo INTERFACE IMPORTED)
	set_target_properties(Arma::Armadillo PROPERTIES
		INTERFACE_INCLUDE_DIRECTORIES "${ARMADILLO_INCLUDE_DIRS}"
		INTERFACE_LINK_LIBRARIES "${ARMADILLO_LIBRARY}")

	# disable opernmp acceleration
	# target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_DONT_USE_OPENMP)

	# set (n)debug flags for Armadilo
	if(CMAKE_BUILD_TYPE STREQUAL Release)
		message(STATUS "Using Armadillo no-debug flags (conformance check disabled!)")
		target_compile_definitions(Arma::Armadillo INTERFACE -DNDEBUG -DARMA_NO_DEBUG -DARMA_DONT_CHECK_CONFORMANCE -DARMA_WARN_LEVEL=1)
	else()
		message(STATUS "Using Armadillo in debug mode")
	endif()

	# disable armadillo wrapper (for using custom BLAS)
	if(BLAS_FOUND AND LAPACK_FOUND)
		# report to user
		message(STATUS "Disabling Armadillo BLAS wrapper.")
		target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_DONT_USE_WRAPPER -DARMA_USE_BLAS)
	endif()

	# disable superlu if not available
    if(ENABLE_SUPERLU)
        message(STATUS "Enabling Armadillo Superlu")
		target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_USE_SUPERLU)
    else()
		message(STATUS "Disabling Armadillo SuperLU")
        target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_DONT_USE_SUPERLU)
	endif()
endif()

# armadillo itself
if(NOT TARGET Arma::Armadillo)
	add_library(Arma::Armadillo INTERFACE IMPORTED)
	set_target_properties(Arma::Armadillo PROPERTIES
		INTERFACE_INCLUDE_DIRECTORIES "${ARMADILLO_INCLUDE_DIRS}"
		INTERFACE_LINK_LIBRARIES "${ARMADILLO_LIBRARY}")

	# disable opernmp acceleration
	# target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_DONT_USE_OPENMP)

	# set (n)debug flags for Armadilo
	if(CMAKE_BUILD_TYPE STREQUAL Release)
		message(STATUS "Using Armadillo no-debug flags (conformance check disabled!)")
		target_compile_definitions(Arma::Armadillo INTERFACE -DNDEBUG -DARMA_NO_DEBUG -DARMA_DONT_CHECK_CONFORMANCE -DARMA_WARN_LEVEL=1)
	else()
		message(STATUS "Using Armadillo in debug mode")
	endif()

	# disable armadillo wrapper (for using custom BLAS)
    #	if(BLAS_FOUND AND LAPACK_FOUND)
    #		# report to user
    #		message(STATUS "Disabling Armadillo BLAS wrapper.")
    #		target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_DONT_USE_WRAPPER -DARMA_USE_BLAS)
    #	endif()
    #
    #	# disable superlu if not available
    #    if(ENABLE_SUPERLU)
    #        message(STATUS "Enabling Armadillo Superlu")
    #		target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_USE_SUPERLU)
    #    else()
    #		message(STATUS "Disabling Armadillo SuperLU")
    #        target_compile_definitions(Arma::Armadillo INTERFACE -DARMA_DONT_USE_SUPERLU)
    #	endif()
endif()

# SDL (should be included through magnum)
if(OFF)
find_dependency(SDL2)
if(NOT TARGET SDL2)
    message(STATUS "SDL2 is not target")
endif()

# OpenGL
if(NOT TARGET OpenGL)
    message(STATUS "OpenGL is not target")
  set(OpenGL_GL_PREFERENCE "GLVND")
  find_dependency(OpenGL)
  find_package(OpenGL REQUIRED)
endif()

endif()

# MagnumIntegration
if(NOT TARGET MagnumIntegration)
    message(STATUS "MagnumIntegration is not target")
    find_dependency(MagnumIntegration)
    find_dependency(MagnumIntegration REQUIRED ImGui)
endif()

# Corrade
if(NOT TARGET Corrade)
    message(STATUS "Corrade is not target")
    find_dependency(Corrade)
    #find_dependency(Corrade REQUIRED Main)
endif()

# Magnum
if(NOT TARGET Magnum)
    message(STATUS "Magnum is not target")
    find_dependency(Magnum REQUIRED 
        GL
        MeshTools
        Primitives
        Shaders
        Trade
        Sdl2Application
        Text
        MagnumFont
)
endif()

# find implot?
#if(NOT TARGET ImPlot)
#message(STATUS "ImPlot not target, find dependency")
#find_dependency(ImPlot)
#endif()

# if we are not smg include smg!
if(NOT TARGET smg)
    message(STATUS "smg is not target")
    message(STATUS "ADD SMG TARGETS")

    # include definitions
    include("${smg_CMAKE_DIR}/smgTargets.cmake")

endif()
set(smg_LIBRARIES smg)

